import { Card, CardContent, CardMedia, Grid, Paper, TextField, Typography, Button } from "@mui/material";
import { useEffect, useState } from "react";
import { Link, useParams } from "react-router-dom";
import fetchModel from "../../libs/fetchModelData";

function UserPhotos(props) {
    const {userId} = useParams();
    const [photos, setPhotos] = useState();
    const [user, setUser] = useState();
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState();
    const [comments, setComments] = useState({});
    const [editingComment, setEditingComment] = useState(null);
    const [editContent, setEditContent] = useState("");

    useEffect(() => {
        const fetchPhotos = async () => {
            try {
                const userResponse = await fetchModel(`api/user/${userId}`, "GET");
                if (userResponse.status===200) {
                    const userData = await userResponse.json();
                    console.log(`user: ${userData}`);
                    setUser(userData);
                }

                const photosResponse = await fetchModel(`api/photo/photosOfUser/${userId}`, "GET");
                const photosData = await photosResponse.json();
                console.log(`photos: ${photosData}`);
                setPhotos(photosData);
                console.log(photos);
            } catch(error) {
                console.log(error);
                setError(error);
            } finally {
                setLoading(false);
            }
        };
        fetchPhotos();
    }, [userId])

    const handleCommentSubmit = async (photoId) => {
        try {
            const response = await fetchModel(
                `api/photo/commentsOfPhoto/${photoId}`,
                "POST",
                {
                    comment: comments[photoId]
                }
            );
            if (response.status===200) {
                alert("comment success");
                setPhotos((prevPhotos) =>
                    prevPhotos.map((photo) =>
                    photo._id === photoId
                        ? {
                            ...photo,
                            comments: [
                            ...(photo.comments || []),
                                {
                                    _id: photoId,
                                    user_id: props.loginUser._id,
                                    user: {
                                    first_name: props.loginUser.first_name,
                                    last_name: props.loginUser.last_name,
                                    },
                                    comment: comments[photoId],
                                    date_time: new Date().toISOString(),
                                },
                            ],
                        }
                        : photo
                    )
                );
            setComments((prevComments) => ({
                ...prevComments,
                [photoId]: "",
            }));
            }
        } catch (error) {
            console.log(error);
            setError(error);
        }
    }

    const handleDeleteComment = async (photoId, commentId) => {
        try {
            const response = await fetchModel(
                `api/photo/commentsOfPhoto/${photoId}/${commentId}`,
                'DELETE'
            );
            if (response.status===200) {
                alert("Delete comment success");
                setComments(comments.filter((cmt) => cmt._id !== commentId));
            }
        } catch(error) {
            console.log(error);
            setError(error);
        }
    }

    const handleDeletePhoto = async (photoId) => {
        try {
            const response = await fetchModel(
                `api/photo/${photoId}`,
                'DELETE'
            );
            if (response.status===200) {
                alert("Delete photo success");
                setPhotos(photos.filter((photo) => photo._id !== photoId));
            }
        } catch (error) {
            console.log(error);
            setError(error);
        }
    }

    const handleEditComment = (photoId, commentId, content) => {
        setEditingComment({photoId, commentId, content});
        setEditContent(content);
    };

    const handleSaveComment = async () => {
        if (!editContent.trim()) {
            setError("Comment cannot be empty");
            return;
        }

        try {
            const { photoId, commentId } = editingComment;
            const response = await fetchModel(
                `api/photo/commentsOfPhoto/${photoId}/${commentId}`,
                'PUT',
                { comment: editContent }
                
            );
            
            if (response.status === 200) {
                alert("Update comment success");
                setPhotos((prevPhotos) =>
                    prevPhotos.map((photo) =>
                        photo._id === photoId
                            ? {
                                  ...photo,
                                  comments: photo.comments.map((cmt) =>
                                      cmt._id === commentId
                                          ? { ...cmt, comment: editContent }
                                          : cmt
                                  ),
                              }
                            : photo
                    )
                );
                setEditingComment(null);
                setEditContent("");
                setError(null);
            } else {
                setError( "Failed to update comment");
            }
        } catch (error) {
            console.error("Error updating comment:", error);
            setError(error.message);
        }
    };

    const handleCancelEdit = () => {
        setEditingComment(null);
        setEditContent("");
        setError(null);
    };
    

    if (props.loginUser) {
        if (loading) return <Typography>Loading...</Typography>;
        //if (error) return <Typography color="error">Error: {error}</Typography>;
        if (!user) {
            return <Typography variant="body1">User not found</Typography>;
        }

        const formatDate = (dateString) => {
        const date = new Date(dateString);
            return date.toLocaleString();
        };
        return (
            <div>
                <Typography variant="h4" gutterBottom>
                    Photos of {user.first_name} {user.last_name}
                </Typography>
                <Grid container spacing={3}>
                    {photos.map((photo) => (
                        <Grid item xs={12} key={photo._id}>
                            <Card>
                                <CardMedia
                                    style={{ objectFit: "contain", width: '60%', height:'auto' }}
                                    component={"img"}
                                    //height="400"
                                    //image={`/images/${photo.file_name}` || photo.file_name}
                                    image={photo.file_name || `/images/${photo.file_name}`}
                                    alt={`Photo by ${user.first_name}`}
                                >
                                </CardMedia>
                                {photo.user_id === props.loginUser._id && (
                                    <button onClick={() => handleDeletePhoto(photo._id)}>
                                        Delete photo
                                    </button>
                                )} 

                                <CardContent>
                                    <Typography variant="body2" color={"text.secondary"} gutterBottom>
                                        {formatDate(photo.date_time)}
                                    </Typography>

                                    <Typography variant="h6" gutterBottom>Comments</Typography>
                                    {photo.comments && photo.comments.length > 0 ? (
                                    photo.comments.map((cmt) => (
                                        <Paper key={cmt._id} sx={{ p: 2, mb: 2 }}>
                                            <Typography variant="body2" color={"text.secondary"}>
                                                {formatDate(cmt.date_time)}
                                            </Typography>
                                            <Typography variant="body1" component={`div`}>
                                                <Link to={`/users/${cmt.user_id}`}>
                                                    {cmt.user.first_name} {cmt.user.last_name}
                                                </Link>
                                                : {cmt.comment}
                                            </Typography>

                                            {cmt.user_id === props.loginUser._id && (
                                                <div>
                                                <button onClick={() => handleDeleteComment(photo._id, cmt._id)}>
                                                    Delete
                                                </button>

                                                <button onClick={() => handleEditComment(photo._id, cmt._id, cmt.comment)}>Edit</button>
                                                </div>
                                            )}
                                        </Paper>
                                        
                                    )))
                                : <Typography>No comments yet</Typography>}
                                </CardContent>

                                <Grid>
                                    <Typography variant="h6" gutterBottom>New comment</Typography>
                                    <TextField
                                        variant="outlined"
                                        margin="normal"
                                        fullWidth
                                        //label="Comment"
                                        value={comments[photo._id] || ''}
                                        onChange={(e) => setComments({...comments, [photo._id] : e.target.value})}
                                    ></TextField>

                                    <Button 
                                        variant="contained"
                                        color="primary"
                                        onClick={() => handleCommentSubmit(photo._id)}
                                    >
                                        Comment
                                    </Button>
                                </Grid>
                            </Card>
                        </Grid>
                    ))}
                </Grid>

                {editingComment && (
                <div
                    style={{
                        position: 'fixed',
                        top: 0,
                        left: 0,
                        width: '100%',
                        height: '100%',
                        backgroundColor: 'rgba(0, 0, 0, 0.5)',
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        zIndex: 1000,
                    }}
                >
                    <div
                        style={{
                            backgroundColor: 'white',
                            padding: '20px',
                            borderRadius: '5px',
                            width: '400px',
                            maxWidth: '90%',
                        }}
                    >
                        <h3 style={{ margin: '0 0 10px' }}>Edit Comment</h3>
                        <input
                            type="text"
                            value={editContent}
                            onChange={(e) => setEditContent(e.target.value)}
                            style={{ width: '100%', padding: '10px', marginBottom: '10px', border: '1px solid #ccc' }}
                        />
                        {error && <p style={{ color: 'red', margin: '0 0 10px' }}>{error}</p>}
                        <div style={{ textAlign: 'right' }}>
                            <button
                                onClick={handleSaveComment}
                                style={{ padding: '5px 15px', marginRight: '10px', backgroundColor: '#4CAF50', color: 'white', border: 'none' }}
                            >
                                Save
                            </button>
                            <button
                                onClick={handleCancelEdit}
                                style={{ padding: '5px 15px', backgroundColor: '#f44336', color: 'white', border: 'none' }}
                            >
                                Cancel
                            </button>
                        </div>
                    </div>
                </div>
            )}
            </div>
        )
    }
}

export default UserPhotos;

import {
  AppBar,
  Toolbar,
  Typography,
  Box,
  Button,
  Grid,
  Dialog,
  DialogTitle,
  DialogContent,
  Input,
  DialogActions,
} from "@mui/material";
import { useState, useEffect } from "react";
import fetchModel from "../../libs/fetchModelData";
import { Navigate, useNavigate } from "react-router-dom";

function TopBar(props) {
  const [user, setUser] = useState();
  const [selectedImage, setSelectedImage] = useState(null);
  const [open, setOpen] = useState(false);
  const [previewUrl, setPreviewUrl] = useState(null);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  const handleLogout = async () => {
    const response = await fetchModel(`api/user/logout`, "POST");
    if (response.status === 200) {
      props.onLogin(null);
      navigate(`/login-register`);
    }
  };

  const handleOpenDialog = () => {
    setOpen(true);
  };

  const handleCloseDialog = () => {
    setOpen(false);
    setSelectedImage(null);
    setPreviewUrl(null);
    setError(null);
  };

  const handleUploadImage = (event) => {
    const file = event.target.files[0];
    if (file) {
      setSelectedImage(file);
      setPreviewUrl(URL.createObjectURL(file));
      setOpen(true);
      setError(null);
    }
  };

  const handleUploadSubmit = async () => {
    if (!selectedImage) {
      setError(`Please select image`);
      return;
    }
    try {
      const formData = new FormData();
      formData.append(`photo`, selectedImage);

      const response = await fetch(
        `https://9cyzc7-8080.csb.app/api/photo/new`,
        {
          method: "POST",
          headers: {
            credentials: "include",
          },
          body: formData,
          credentials: "include",
        }
      );
      if (response.status === 200) {
        alert("Upload success");
        handleCloseDialog();
      } else {
        setError(`Error while upload image`);
      }
    } catch (error) {
      setError(error);
    }
  };

  useEffect(() => {
    return () => {
      if (previewUrl) URL.revokeObjectURL(previewUrl);
    };
  }, [previewUrl]);

  if (props.loginUser) {
    return (
      <AppBar className="topbar-appBar" position="absolute">
        <Toolbar>
          <Typography variant="h5" color="inherit" sx={{ flexGrow: 1 }}>
            Hi {props.loginUser.first_name} {props.loginUser.last_name}
          </Typography>
          <Grid >
              <Button variant="contained" onClick={handleOpenDialog}>Upload</Button>
                 <Button variant="contained" onClick={handleLogout}>Logout</Button>

                    <Dialog open={open} onClose={handleCloseDialog}>
                       <DialogTitle>Upload photo</DialogTitle>
                          <DialogContent>
                             {previewUrl && (
                                <Box>
                                   <img
                                     src={previewUrl}
                                     ></img>
                                </Box>
                              )}
                              <input type="file" onChange={handleUploadImage}></input>
                          </DialogContent>
                          <DialogActions>
                            <button onClick={handleUploadSubmit}>Upload</button>
                            <button onClick={handleCloseDialog}>Cancel</button>
                          </DialogActions>
                        </Dialog>
                    </Grid>
        </Toolbar>
      </AppBar>
    );
  } else {
    return (
      <AppBar className="topbar-appBar" position="absolute">
        <Toolbar>
          <Typography variant="h5" color="inherit" sx={{ flexGrow: 1 }}>
            Please Login
          </Typography>
          <Box sx={{ flexGrow: 0 }}>
            <Typography variant="h6" color="inherit">
              Photo sharing app
            </Typography>
          </Box>
        </Toolbar>
      </AppBar>
    );
  }
}

export default TopBar;
